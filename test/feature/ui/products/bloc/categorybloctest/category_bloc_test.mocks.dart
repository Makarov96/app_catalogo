// Mocks generated by Mockito 5.1.0 from annotations
// in app_catalogo/test/feature/ui/products/bloc/categorybloctest/category_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:core_catalogo_module/core/error/exception.dart' as _i6;
import 'package:core_catalogo_module/core/usecase/use_case.dart' as _i10;
import 'package:core_catalogo_module/feature/data/model/request/set_favorite_request_model.dart'
    as _i8;
import 'package:core_catalogo_module/feature/data/model/response/category_model.dart'
    as _i3;
import 'package:core_catalogo_module/feature/data/model/response/product_model.dart'
    as _i7;
import 'package:core_catalogo_module/feature/domain/repositories/store_repository.dart'
    as _i4;
import 'package:core_catalogo_module/feature/domain/usecases/get_category_use_case.dart'
    as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [CategoryModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryModel extends _i1.Mock implements _i3.CategoryModel {
  MockCategoryModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ProductCategory> get listProductCategory =>
      (super.noSuchMethod(Invocation.getter(#listProductCategory),
          returnValue: <_i3.ProductCategory>[]) as List<_i3.ProductCategory>);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [ProductCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductCategory extends _i1.Mock implements _i3.ProductCategory {
  MockProductCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  num get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as num);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [StoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreRepository extends _i1.Mock implements _i4.StoreRepository {
  MockStoreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>> getAllProduct(
          {int? offset, int? limit}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getAllProduct, [], {#offset: offset, #limit: limit}),
          returnValue:
              Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>.value(
                  _FakeEither_0<_i6.GenericException, _i7.ProductModel>())) as _i5
          .Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>);
  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i3.CategoryModel>>
      getAllCategory() => (super.noSuchMethod(
          Invocation.method(#getAllCategory, []),
          returnValue: Future<
                  _i2.Either<_i6.GenericException, _i3.CategoryModel>>.value(
              _FakeEither_0<_i6.GenericException, _i3.CategoryModel>())) as _i5
          .Future<_i2.Either<_i6.GenericException, _i3.CategoryModel>>);
  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>
      searchProductByName({String? productName}) => (super.noSuchMethod(
          Invocation.method(
              #searchProductByName, [], {#productName: productName}),
          returnValue:
              Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>.value(
                  _FakeEither_0<_i6.GenericException, _i7.ProductModel>())) as _i5
          .Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>);
  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>
      searchByTagProduct({int? tagId}) => (super.noSuchMethod(
              Invocation.method(#searchByTagProduct, [], {#tagId: tagId}),
              returnValue: Future<
                      _i2.Either<_i6.GenericException, _i7.ProductModel>>.value(
                  _FakeEither_0<_i6.GenericException, _i7.ProductModel>()))
          as _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>);
  @override
  _i5.Future<_i2.Either<_i6.GenericException, bool>> favoriteProduct(
          _i8.SetFavoriteRequestModel? setFavoriteRequestModel) =>
      (super.noSuchMethod(
              Invocation.method(#favoriteProduct, [setFavoriteRequestModel]),
              returnValue: Future<_i2.Either<_i6.GenericException, bool>>.value(
                  _FakeEither_0<_i6.GenericException, bool>()))
          as _i5.Future<_i2.Either<_i6.GenericException, bool>>);
  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>
      searchByProdcutId({int? id}) => (super.noSuchMethod(
              Invocation.method(#searchByProdcutId, [], {#id: id}),
              returnValue: Future<
                      _i2.Either<_i6.GenericException, _i7.ProductModel>>.value(
                  _FakeEither_0<_i6.GenericException, _i7.ProductModel>()))
          as _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>);
  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>
      searchByIsFavoriteProduct() => (super.noSuchMethod(
              Invocation.method(#searchByIsFavoriteProduct, []),
              returnValue: Future<
                      _i2.Either<_i6.GenericException, _i7.ProductModel>>.value(
                  _FakeEither_0<_i6.GenericException, _i7.ProductModel>()))
          as _i5.Future<_i2.Either<_i6.GenericException, _i7.ProductModel>>);
}

/// A class which mocks [GetCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoryUseCase extends _i1.Mock
    implements _i9.GetCategoryUseCase {
  MockGetCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.GenericException, _i3.CategoryModel>> call(
          _i10.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<
                  _i2.Either<_i6.GenericException, _i3.CategoryModel>>.value(
              _FakeEither_0<_i6.GenericException, _i3.CategoryModel>())) as _i5
          .Future<_i2.Either<_i6.GenericException, _i3.CategoryModel>>);
}
